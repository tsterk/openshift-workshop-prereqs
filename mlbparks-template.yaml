apiVersion: template.openshift.io/v1
kind: Template
labels:
  createdBy: mlbparks-template
metadata:
  annotations:
    description: Application template MLBParks backend running on Wildfly and using
      mongodb
    iconClass: icon-eap
    openshift.io/display-name: MLBparks
    openshift.io/long-description: This template deploys a Parksmap backend showing
      you where some Major League Baseball (MLB) parks are. This template uses Java
      and a Mongodb
    openshift.io/provider-display-name: OpenShift evangelist team
    tags: roadshow,java,springboot,parksmap-backend
  creationTimestamp: null
  name: mlbparks
objects:
- apiVersion: v1
  data:
    application.properties: spring.data.mongodb.uri=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}:27017/${MONGODB_DATABASE}
    db.name: ${MONGODB_DATABASE}
    db.password: ${MONGODB_PASSWORD}
    db.properties: |-
      db.user=${MONGODB_USER}
      db.password=${MONGODB_PASSWORD}
      db.name=${MONGODB_DATABASE}
    db.user: ${MONGODB_USER}
  kind: ConfigMap
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: config
    name: mlbparks
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: database
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      deploymentConfig: ${MONGODB_APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: database
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: workshop
      component: mlbparks
      deploymentConfig: ${MONGODB_APPLICATION_NAME}
      role: database
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: workshop
          component: mlbparks
          deploymentConfig: ${MONGODB_APPLICATION_NAME}
          role: database
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            valueFrom:
              configMapKeyRef:
                key: db.user
                name: mlbparks
          - name: MONGODB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: db.password
                name: mlbparks
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: db.name
                name: mlbparks
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_USER}
          image: ${MONGODB_APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: ${MONGODB_APPLICATION_NAME}
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${MONGODB_APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: backend
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: backend
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources:
      limits:
        cpu: "1"
        memory: 768Mi
      requests:
        cpu: "1"
        memory: 768Mi
    runPolicy: Serial
    source:
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_ARGS
          value: clean package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: jboss-eap70-openshift:1.6
        incremental: false
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_TRIGGER_SECRET}
      type: Generic
    - type: ConfigChange
    - type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: backend
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: workshop
      component: mlbparks
      deploymentConfig: ${APPLICATION_NAME}
      role: database
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
            - curl
            - -s
            - http://${APPLICATION_NAME}:8080/ws/data/load
            containerName: ${APPLICATION_NAME}
          failurePolicy: Ignore
        timeoutSeconds: 600
      resources:
        limits:
          memory: 768Mi
        requests:
          memory: 768Mi
      type: Recreate
    template:
      metadata:
        labels:
          app: workshop
          component: mlbparks
          deploymentConfig: ${APPLICATION_NAME}
          role: database
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: component=${APPLICATION_NAME}
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DB_PORT
            value: "27017"
          - name: DB_HOST
            value: ${MONGODB_APPLICATION_NAME}
          - name: DB_USERNAME
            valueFrom:
              configMapKeyRef:
                key: db.user
                name: mlbparks
          - name: DB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: db.password
                name: mlbparks
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                key: db.name
                name: mlbparks
          image: ${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8787
            name: debug
            protocol: TCP
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${MONGODB_APPLICATION_NAME}","namespace":"","kind":"Service"}]'
    labels:
      app: workshop
      component: mlbparks
      role: backend
      type: parksmap-backend
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8787-tcp
      port: 8787
      protocol: TCP
      targetPort: 8787
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: workshop
      component: mlbparks
      role: backend
    name: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- description: The name for the mlbparks application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: mlbparks
- description: 'Custom hostname for mlbparks application.  Leave blank for default
    hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Application route
  name: APPLICATION_HOSTNAME
- description: The name for the mongodb application.
  displayName: Mongodb App
  name: MONGODB_APPLICATION_NAME
  required: true
  value: mongodb-mlbparks
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/openshift-roadshow/mlbparks.git
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  required: true
  value: master
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g.
    http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
- description: Database name
  displayName: Database name
  name: MONGODB_DATABASE
  required: true
  value: mongodb
- description: Database user name
  displayName: Database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true
- description: Database user password
  displayName: Database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true
- description: Database admin password
  displayName: Database admin password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true
- description: Github trigger secret
  displayName: GitHub Trigger
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_TRIGGER_SECRET
  required: true
- description: Generic build trigger secret
  displayName: Generic Trigger
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_TRIGGER_SECRET
  required: true
